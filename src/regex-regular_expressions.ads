--  Ada regular expression library
--  (c) Kristian Klomsten Skordal 2020 <kristian.skordal@wafflemail.net>
--  Report bugs and issues on <https://github.com/skordal/ada-regex>

with Regex.Syntax_Trees;
with Regex.State_Machines;

private with Ada.Finalization;
private with Ada.Text_IO;

package Regex.Regular_Expressions is

   --  Regex engine exceptions:
   Syntax_Error        : exception;
   Unsupported_Feature : exception;

   --  Regular expression object:
   type Regular_Expression is tagged limited private;

   --  Creates a regular expression object from a regular expression string:
   function Create (Input : in String) return Regular_Expression;

   --  Creates a regular expression object from an existing syntax tree:
   function Create (Input : in Regex.Syntax_Trees.Syntax_Tree_Node_Access) return Regular_Expression;

   --  Gets the syntax tree of a regular expression:
   function Get_Syntax_Tree (This : in Regular_Expression)
      return Regex.Syntax_Trees.Syntax_Tree_Node_Access with Inline;

   --  Gets the state machine generated by a regular expression:
   function Get_State_Machine (This : in Regular_Expression)
      return Regex.State_Machines.State_Machine_State_Vectors.Vector with Inline;

   --  Gets the start state of a regular expression:
   function Get_Start_State (This : in Regular_Expression)
      return Regex.State_Machines.State_Machine_State_Access with Inline;

private
   use Regex.State_Machines;
   use Regex.Syntax_Trees;

   --  Complete regular expression object type:
   type Regular_Expression is new Ada.Finalization.Limited_Controlled with record
      Syntax_Tree : Syntax_Tree_Node_Access := null; --  Syntax tree kept around for debugging
      Syntax_Tree_Node_Count : Natural := 1;         --  Counter used to number nodes and keep count

      State_Machine_States : State_Machine_State_Vectors.Vector := State_Machine_State_Vectors.Empty_Vector;
      Start_State          : State_Machine_State_Access;
   end record;

   --  Frees a regular expression object:
   overriding procedure Finalize (This : in out Regular_Expression);

   --  Gets the next node ID:
   function Get_Next_Node_Id (This : in out Regular_Expression) return Natural with Inline;

   --  Parses a regular expression and constructs a syntax tree:
   procedure Parse (Input : in String; Output : in out Regular_Expression);

   --  Compiles a regular expression into a state machine:
   procedure Compile (Output : in out Regular_Expression);

end Regex.Regular_Expressions;

